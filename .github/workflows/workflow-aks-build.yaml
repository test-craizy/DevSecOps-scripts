name: Reusable AKS Build Workflow

on:
  workflow_call:
    inputs:
      componente:
        description: "Nombre del componente a construir"
        type: string
        required: true
    secrets:
      gh_token:
        description: "GitHub Token para autenticaciÃ³n"
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Checkout Repository (DevSecOps-scripts)
        uses: actions/checkout@v3
        with:
          repository: test-craizy/DevSecOps-scripts
          token: ${{ secrets.gh_token }}
          path: devsecops-scripts  
          ref: main
          fetch-depth: 0

      - name: Set parameters
        run: chmod +x devsecops-scripts/utils/set-parameters.sh && devsecops-scripts/utils/set-parameters.sh ${{ inputs.componente }}

      - name: Set Environment Variables
        run: |
          # Set the absolute path to the folder
          if [ -n "${{ inputs.componente.folder }}" ]; then
            echo "absolutePathFolder=${{ github.workspace }}/${{ inputs.componente.folder }}" >> $GITHUB_ENV
            echo "absolutePathPom=${{ github.workspace }}/${{ inputs.componente.folder }}/pom.xml" >> $GITHUB_ENV
          else
            echo "absolutePathFolder=${{ github.workspace }}" >> $GITHUB_ENV
            echo "absolutePathPom=${{ github.workspace }}/pom.xml" >> $GITHUB_ENV
          fi

          # Set Maven options
          echo "mavenOptions=-Xmx3072m" >> $GITHUB_ENV

          # Set JDK architecture option
          echo "jdkArchitectureOption=x64" >> $GITHUB_ENV

          # Set whether to publish JUnit results
          echo "publishJUnitResults=true" >> $GITHUB_ENV

          # Set the script path
          echo "scriptPath=devops-scripts/azure-devops/templates/scripts" >> $GITHUB_ENV

          # Set the AKS script path
          echo "AKS_SCRIPT_PATH=devops-scripts/azure-devops/templates/aks/private/scripts" >> $GITHUB_ENV

          # Set the certificadoHV variable
          if [ -n "${{ inputs.componente.certificadoHV }}" ]; then
            echo "certificadoHV=${{ inputs.componente.certificadoHV }}" >> $GITHUB_ENV
          else
            echo "certificadoHV=false" >> $GITHUB_ENV
          fi

          # Set the certificadoAG variable
          if [ -n "${{ inputs.componente.certificadoAG }}" ]; then
            echo "certificadoAG=${{ inputs.componente.certificadoAG }}" >> $GITHUB_ENV
          else
            echo "certificadoAG=false" >> $GITHUB_ENV
          fi

          # Set the certificadoCA variable
          if [ -n "${{ inputs.componente.certificadoCA }}" ]; then
            echo "certificadoCA=${{ inputs.componente.certificadoCA }}" >> $GITHUB_ENV
          else
            echo "certificadoCA=false" >> $GITHUB_ENV
          fi

          # Set the manifests folder name
          echo "manifestsFolderName=manifests" >> $GITHUB_ENV

      - name: Echo Parameters
        run: |
          echo "Nombre: ${{ env.NOMBRE }}"
          echo "Namespace: ${{ env.NAMESPACE }}"
          echo "AKS: ${{ env.AKS }}"
          echo "Squad: ${{ env.SQUAD }}"
          echo "Repo Validation: ${{ env.REPO_VALIDATION }}"
          echo "Folder Validation: ${{ env.FOLDER_VALIDATION }}"
          echo "Smoke File: ${{ env.SMOKE_FILE }}"
          echo "Acceptance File: ${{ env.ACCEPTANCE_FILE }}"
          echo "No AG: ${{ env.NO_AG }}"
          echo "Service Port: ${{ env.SERVICE_PORT }}"

      - name: Echo Environment Variables
        run: |
          echo "absolutePathFolder=${{ env.absolutePathFolder }}"
          echo "absolutePathPom=${{ env.absolutePathPom }}"
          echo "mavenOptions=${{ env.mavenOptions }}"
          echo "jdkArchitectureOption=${{ env.jdkArchitectureOption }}"
          echo "publishJUnitResults=${{ env.publishJUnitResults }}"
          echo "scriptPath=${{ env.scriptPath }}"
          echo "AKS_SCRIPT_PATH=${{ env.AKS_SCRIPT_PATH }}"
          echo "certificadoHV=${{ env.certificadoHV }}"
          echo "certificadoAG=${{ env.certificadoAG }}"
          echo "certificadoCA=${{ env.certificadoCA }}"
          echo "manifestsFolderName=${{ env.manifestsFolderName }}"


      - name: Grant Execute Permissions to Build Script
        run: chmod +x devsecops-scripts/scripts/build/build.sh

      - name: run build
        run: devsecops-scripts/scripts/build/build.sh
       